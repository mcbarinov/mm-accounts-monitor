{% extends "inc/base.j2" %}
{% block content %}

  <nav>
    <ul>
      <li><h3>groups / {{ groups | length }}</h3></li>
      <li><a data-target="modal-add" onclick="toggleModal(event)">add</a></li>
      <li><a href="/api/groups/export">export</a></li>
      <li><a data-target="modal-import" onclick="toggleModal(event)">import</a></li>
    </ul>
  </nav>

  <form method="GET">
    <fieldset role="group">
      <select name="network_type">
        <option value="">network type...</option>
        {% for nt in network_types %}
          <option
            value="{{ nt.value }}" {{ "selected" if nt.value == form.network_type }}>{{ nt.value }}</option>
        {% endfor %}
      </select>
      <input type="submit" value="filter" class="outline">
    </fieldset>
  </form>

  <dialog id="modal-add">
    <article>
      <header>Add a group</header>
      <form action="/groups" method="post">
        <input type="text" name="name" placeholder="name" required>
        <select name="network_type" required onchange="addGroupChangeNetworkType(event)">
          <option value="" disabled selected>network type...</option>
          {% for nt in network_types %}
            <option value="{{ nt.value }}">{{ nt.value }}</option>
          {% endfor %}
        </select>
        <input type="text" name="notes" placeholder="notes">
        <select name="namings" multiple title="namings">
          {% for n in namings %}
            <option value="{{ n.value }}" id="naming-{{ n.network_type.value }}">{{ n.value }}</option>
          {% endfor %}
        </select>
        <select name="coins" multiple style="height:300px" title="coins">
          {% for network_type, coins in coins_by_network_type.items() %}
            <optgroup label="{{ network_type.value }}" id="coins-{{ network_type.value }}">
              {% for c in coins %}
                <option value="{{ c.id }}">{{ c.network.value }} / {{ c.symbol }}</option>
              {% endfor %}
            </optgroup>
          {% endfor %}
        </select>
        <input type="submit" value="add">
      </form>
    </article>
  </dialog>


  <dialog id="modal-import">
    <article>
      <header>Import groups as toml</header>
      <form action="/groups/import" method="post">
        <textarea name="toml" rows="10"></textarea>
        <input type="submit" value="import">
      </form>
    </article>
  </dialog>

  <table>
    <tr>
      <th>name</th>
      <th>notes</th>
      <th>namings</th>
      <th>coins</th>
      <th>accounts</th>
      <th>actions</th>
    </tr>
    {% for g in groups %}
      <tr>
        <td>
          <a href="/groups/{{ g.id }}">{{ g.name }}</a><br>
          {{ g.network_type.value }}
        </td>
        <td>{{ g.notes }}</td>
        <td>{% for n in g.namings %} {{ n.value }} {% endfor %}</td>
        <td>
          {% for n in g.get_coin_networks() %}
            {{ n }}:
            {% for s in g.get_coin_symbols(n) %}{{ s }} {% endfor %}
            <br>
          {% endfor %}
        </td>
        <td>{{ g.accounts | length }}</td>
        <td>
          <details class="dropdown">
            <summary>actions</summary>
            <ul>
              <li><a data-target="modal-update-accounts-{{ g.id }}" onclick="toggleModal(event)">update accounts</a>
              </li>
              <li><a data-target="modal-update-coins-{{ g.id }}" onclick="toggleModal(event)">update coins</a></li>
              <li><a href="/api-post/history?group={{ g.id }}">create history</a></li>
              <li><a href="/api-post/groups/{{ g.id }}/reset-group-balances" {{ confirm }}>reset group balances</a></li>
              <li><a href="/api-post/groups/{{ g.id }}/process-account-names">process account names</a></li>
              <li><a href="/api-post/groups/{{ g.id }}/process-account-balances">process account balances</a></li>
              <li><a href="/api-delete/groups/{{ g.id }}" {{ confirm }}>delete</a></li>
              <li><a href="/api/groups/{{ g.id }}">view</a></li>
            </ul>
          </details>

          <dialog id="modal-update-accounts-{{ g.id }}">
            <article>
              <header>
                <h3>update accounts for {{ g.name }}</h3>
              </header>
              <form method="post" action="/groups/{{ g.id }}/accounts">
                <textarea name="value" rows="20" required>{{ "\n".join(g.accounts) }}</textarea>
                <input type="submit" value="save">
              </form>
            </article>
          </dialog>

          <dialog id="modal-update-coins-{{ g.id }}">
            <article>
              <header>
                <h3>update coins for {{ g.name }}</h3>
              </header>
              <form method="post" action="/groups/{{ g.id }}/coins">
                <select name="value" multiple style="min-height:300px">
                  {% for network_type, coins in coins_by_network_type.items() %}
                    <optgroup label="{{ network_type.value }}">
                      {% for c in coins %}
                        <option value="{{ c.id }}" {{ 'selected' if c.id in g.coins else '' }}>{{ c.network }}
                          / {{ c.symbol }}</option>
                      {% endfor %}
                    </optgroup>
                  {% endfor %}
                </select>
                <input type="submit" value="save">
              </form>
            </article>
          </dialog>

        </td>
      </tr>
    {% endfor %}
  </table>


  <script>
    function addGroupChangeNetworkType(event) {
      const selectedNetwork = event.target.value;

      // ————— NAMINGS SELECT —————
      const namingSelect = document.querySelector('select[name="namings"]');
      // Loop through all naming options
      namingSelect.querySelectorAll('option').forEach(opt => {
        if (opt.id === 'naming-' + selectedNetwork) {
          // Show the option matching the selected network
          opt.hidden = false;
          opt.disabled = false;
        } else {
          // Hide all other naming options
          opt.hidden = true;
          opt.disabled = true;
        }
        // Deselect everything to reset prior selections
        opt.selected = false;
      });

      // ————— COINS SELECT —————
      const coinsSelect = document.querySelector('select[name="coins"]');
      // Loop through each optgroup of coins
      coinsSelect.querySelectorAll('optgroup').forEach(group => {
        if (group.id === 'coins-' + selectedNetwork) {
          // Show only the matching coin group
          group.hidden = false;
          group.querySelectorAll('option').forEach(opt => {
            opt.disabled = false;   // enable its options
          });
        } else {
          // Hide all other coin groups
          group.hidden = true;
          group.querySelectorAll('option').forEach(opt => {
            opt.disabled = true;    // disable their options
            opt.selected = false;   // deselect any previously selected
          });
        }
      });
    }

  </script>

{% endblock %}
